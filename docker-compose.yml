version: '3.8'

services:
  # Serviço para a nossa API (o backend)
  api:
    build: .
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./app:/app/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db: # <-- MODIFICAÇÃO AQUI
        condition: service_healthy # Espera o healthcheck do DB passar
      redis:
        condition: service_started
  
  # Serviço para o banco de dados PostgreSQL
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5434:5432" # Usando a porta que definimos anteriormente
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck: # <-- ADIÇÃO IMPORTANTE AQUI
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço para o Redis (intermediário para o Celery)
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data/
    ports:
      - "6379:6379"

  # Serviço para o Celery Worker
  worker:
    build: .
    command: celery --app app.worker.celery_worker worker --loglevel=info
    env_file:
      - .env
    depends_on:
      db: # <-- MODIFICAÇÃO AQUI
        condition: service_healthy # O worker também espera o DB
      redis:
        condition: service_started
      
volumes:
  postgres_data:
  redis_data: